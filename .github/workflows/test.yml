name: test

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize]
  push:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: 🏗 Setup repo
        uses: actions/checkout@v3

      - name: 🏗 Setup project
        uses: ./.github/actions/setup-project

      - name: ✅ Lint project
        run: yarn lint --max-warnings 0

  scripts:
    runs-on: ubuntu-latest
    steps:
      - name: 🏗 Setup repo
        uses: actions/checkout@v3

      - name: 🏗 Setup project
        uses: ./.github/actions/setup-project

      - name: ✅ Test scripts
        run: yarn test:scripts

  bundled:
    # This extension is bundled before publishing to the stores,
    # it removes the need for vscode to download dependencies, making install fast.
    # But this version might cause issues with webpack "hijacking" `require` statements.
    runs-on: ubuntu-latest
    steps:
      - name: 🏗 Setup repo
        uses: actions/checkout@v3

      - name: 🏗 Setup project
        uses: ./.github/actions/setup-project
        with:
          with-fixture: true

      - name: 👷 Build tests
        run: yarn build

      - name: 📦 Bundle extension
        run: yarn build:production

      # When bundled, these dependencies aren't available in normal environments.
      # This kind-of fakes such environments, while keeping the required dev packages.
      - name: 🧹 Remove Sucrase
        run: yarn remove sucrase

      - name: 🧪 Test on Ubuntu
        run: xvfb-run --auto-servernum --listen-tcp yarn test:vscode
        env:
          VSCODE_VERSION: stable

  vscode:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        vscode: [oldest, stable]
    steps:
      - name: 🏗 Setup repo
        uses: actions/checkout@v3

      - name: 🏗 Setup project
        uses: ./.github/actions/setup-project
        with:
          with-fixture: true
          without-cache: ${{ matrix.os == 'windows-latest' }}

      - name: 👷 Build project
        run: yarn build

      # This handles the "oldest" vscode version by looking up our "oldest supported version"
      - name: 🕵️ Set vscode version
        uses: actions/github-script@v6
        with:
          script: |
            const { engines } = require('./package.json')
            const vscode = '${{ matrix.vscode }}'
            const target = vscode === 'oldest' 
                ? engines.vscode.substring(1)
                : vscode
            core.exportVariable('VSCODE_VERSION', target)

      - name: 🧪 Test on Ubuntu
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        run: xvfb-run --auto-servernum --listen-tcp yarn test:vscode

      - name: 🧪 Test on Mac/Windows
        if: ${{ !startsWith(matrix.os, 'ubuntu') }}
        run: yarn test:vscode
