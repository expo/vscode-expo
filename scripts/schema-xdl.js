const execa = require('execa');
const fs = require('fs');
const jsonSchemaTraverse = require('json-schema-traverse');
const fetch = require('node-fetch');
const path = require('path');
const { major } = require('semver');

const schemaDir = path.resolve(__dirname, '../schema');

generate()
  .then((schemaPath) => console.log(`✓ Generated XDL schema!\n  ${schemaPath}`))
  .catch((error) => {
    console.error(`✖ Error generating XDL schema\n  ${error}`);
    throw error;
  });

/** Download and process the XDL schema for usage in vscode. */
async function generate(tagOrVersion = 'latest') {
  const sdkVersion = await resolveVersion(tagOrVersion);
  const sdkSchema = await resolveSchema(sdkVersion);
  const vscodeSchema = processSchema(sdkVersion, sdkSchema);

  const schemaPath = path.resolve(schemaDir, `manifest-${sdkVersion}.json`);

  await fs.promises.mkdir(path.dirname(schemaPath), { recursive: true });
  await fs.promises.writeFile(schemaPath, JSON.stringify(vscodeSchema, null, 2), 'utf-8');

  return schemaPath;
}

/** Find the major SDK version from the `expo` package. */
async function resolveVersion(tagOrVersion = 'latest') {
  const version = (await execa('npm', ['info', `expo@${tagOrVersion}`, 'version'])).stdout.trim();
  return major(version);
}

/** Download the latest XDL schema by major Expo SDK version. */
async function resolveSchema(sdkVersion) {
  return fetch(`https://exp.host/--/api/v2/project/configuration/schema/${sdkVersion}.0.0`)
    .then((response) => response.json())
    .then((json) => json.data.schema);
}

/**
 * Pre-process the XDL schema to make it compatible with vscode.
 * This modifies the provided `xdlSchema` object.
 */
function processSchema(xdlVersion, xdlSchema) {
  jsonSchemaTraverse(
    xdlSchema,
    (nested, _nestedPath, _root, _parentPath, parentKey, parent, parentKeyIndex) => {
      schemaRemoveAutoGenerated(nested, parent, parentKey, parentKeyIndex);
      schemaAddBareWorkflowDescription(nested);
      schemaAddMarkdownDescription(nested);
    }
  );

  // note: we need to move over definitions from the schema and put them into root
  const { definitions } = xdlSchema;
  if (definitions) {
    delete xdlSchema.definitions;
  }

  return {
    type: 'object',
    description: 'The Expo manifest (app.json) validation and documentation.',
    version: xdlVersion,
    $schema: 'http://json-schema.org/draft-07/schema#',
    // Do not warn about additional properties for plain React Native apps
    additionalProperties: true,
    definitions,
    properties: {
      expo: xdlSchema,
    },
  };
}

/** Remove auto-generated properties from the schema, they aren't configurable by the user. */
function schemaRemoveAutoGenerated(
  nested,
  parent = undefined,
  parentKey = undefined,
  parentKeyIndex = undefined
) {
  // Only edit nodes with parents that are autogenerated
  if (nested.meta?.autogenerated && parent && parentKey && parentKeyIndex) {
    delete parent[parentKey][parentKeyIndex];
  }
}

/** Move bare workflow notes to the property descriptions, if available. */
function schemaAddBareWorkflowDescription(schema) {
  if (schema.meta?.bareWorkflow) {
    const description = schema.description || '';
    const bareNotes = schema.meta.bareWorkflow;

    schema.description = `${description}\n\n**Bare workflow** - ${bareNotes}`.trim();
  }
}

/**
 * Add a `markdownDescription` property based on the `description`, if not defined.
 * Only the `markdownDescription` property allows rendering markdown in vscode.
 */
function schemaAddMarkdownDescription(schema) {
  if (schema.description && !schema.markdownDescription) {
    schema.markdownDescription = schema.description;
  }
}
